<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
using Rebel.Framework.Tasks;
using Rebel.Framework;
using Rebel.Cms.Web.Tasks;
using Rebel.Cms.Web.Context;
using Rebel.Framework.Diagnostics;

namespace <#= Model.Namespace #>.Tasks
{ 
	[Task("<#= Model.TaskGuid #>", TaskTriggers.Hive.Revisions.PreAddOrUpdate)]
	public class <#= Model.ClassName #> : AbstractWebTask
	{
		public <#= Model.ClassName #>(IRebelApplicationContext applicationContext) : base(applicationContext) { }

		//Method which is executed when trigger fires, this receives a Task context
		//Raised before a entity revision is added to a unit of work, for either creation or updating, this task can cancel the add
		public override void Execute(TaskExecutionContext context)
		{
			//Here we can cast the CallerEventArgs to HiveRevisionPreActionEventArgs
			var args = (Rebel.Hive.HiveRevisionPreActionEventArgs)context.EventArgs.CallerEventArgs;

			//cancel the revision being added or updated
			context.Cancel = true;
		}
	}
}