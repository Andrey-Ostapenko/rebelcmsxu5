<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
using Rebel.Framework.Tasks;
using Rebel.Framework;
using Rebel.Cms.Web.Tasks;
using Rebel.Cms.Web.Context;
using Rebel.Framework.Diagnostics;

namespace <#= Model.Namespace #>.Tasks
{ 
	[Task("<#= Model.TaskGuid #>", TaskTriggers.Hive.Revisions.PostAddOrUpdateOnUnitComplete)]
	public class <#= Model.ClassName #> : AbstractWebTask
	{
		public <#= Model.ClassName #>(IRebelApplicationContext applicationContext) : base(applicationContext) { }

		//Method which is executed when trigger fires, this receives a Task context
		//Raised at the end of a work unit completion, triggered for each entity added or updated
		public override void Execute(TaskExecutionContext context)
		{
			var item = context.EventSource;
			
			//In this case we cast the CallerEventArgs to HiveRevisionPostActionEventArgs
			var args = (Rebel.Hive.HiveRevisionPostActionEventArgs)context.EventArgs.CallerEventArgs;
			
			//Finally we log the execution
			LogHelper.Warn<<#= Model.ClassName #>>("This ID was just added or updated" + args.Entity.Item.Id.ToString());
		}
	}
}