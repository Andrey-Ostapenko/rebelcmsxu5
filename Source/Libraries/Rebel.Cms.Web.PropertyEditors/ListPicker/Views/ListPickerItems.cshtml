@inherits WebViewPage<IList<Rebel.Cms.Web.PropertyEditors.ListPicker.ListItem>>
              
@using Rebel.Cms.Web;
@using ClientDependency.Core;
@using ClientDependency.Core.Mvc;
@using System.Web.Helpers;
@using System.Web.Mvc;
@using System.Web.Mvc.Ajax;
@using System.Web.Mvc.Html;
@using System.Web.Routing;
@using System.Web.WebPages;
@using Microsoft.Web.Mvc;
@using Rebel.Cms.Web.EmbeddedViewEngine;
@using Rebel.Cms.Web.PropertyEditors.ListPicker;
@using Rebel.Cms.Web.PropertyEditors;

@{ 
    Html
        .RequiresJsResource(typeof(ListPickerEditor), "Rebel.Cms.Web.PropertyEditors.ListPicker.Resources.ListPickerPrevalueEditor.js")
        .RequiresCssResource(typeof(ListPickerEditor), "Rebel.Cms.Web.PropertyEditors.ListPicker.Resources.ListPickerPrevalueEditor.css");
        
}

<script type="text/javascript">

    (function ($) {
        $(document).ready(function () {

            Rebel.PropertyEditors.ListPickerPrevalueEditor.init({
                containerId: "#items",
                templateId: "#itemTemplate",
                addId: "#add"
            });
        });
    })(jQuery);

</script>
<script type="text/x-jquery-tmpl" id="itemTemplate">
        @Html.CollectionItemJQueryTemplate(Html.GetEmbeddedViewPath("Rebel.Cms.Web.PropertyEditors.ListPicker.Views.ListPickerItem.cshtml", "Rebel.Cms.Web.PropertyEditors"), new ListItem())
</script>

<ul id="items">
@if (Model != null)
{
    foreach (ListItem item in Model)
    {
         Html.RenderPartial(
             Html.GetEmbeddedViewPath(
                 "Rebel.Cms.Web.PropertyEditors.ListPicker.Views.ListPickerItem.cshtml", "Rebel.Cms.Web.PropertyEditors"),
                 item);
     }
}
</ul>
<a id="add" href="#">Add another item</a>