using System;
using System.Collections.Generic;


namespace Rebel.Framework.TypeMapping
{
    using System.Diagnostics;

    [DebuggerDisplay("Source: {SourceType.Name} Dest: {DestinationType.Name} Inherit: {PermitTypeInheritance}")]
    public class TypeMapperMetadata : MetadataComposition
    {
        /// <summary>
        /// constructor, sets all properties of this object based on the dictionary values
        /// </summary>
        /// <param name="obj"></param>
        public TypeMapperMetadata(IDictionary<string, object> obj)
            : base(obj)
        {
        }

        /// <summary>
        /// constructor, sets all properties of this object based parameter values
        /// </summary>
        /// <param name="fromType">From type.</param>
        /// <param name="toType">To type.</param>
        /// <param name="permitTypeInheritance">if set to <c>true</c> [permit type inheritance].</param>
        /// <remarks></remarks>
        public TypeMapperMetadata(Type fromType, Type toType, bool permitTypeInheritance)
            : base(null)
        {
            SourceType = fromType;
            DestinationType = toType;
            PermitTypeInheritance = permitTypeInheritance;
        }

        /// <summary>
        /// Constructor sets permitTypeInheritance to false by default
        /// </summary>
        /// <param name="fromType"></param>
        /// <param name="toType"></param>
        public TypeMapperMetadata(Type fromType, Type toType)
            : base(null)
        {
            SourceType = fromType;
            DestinationType = toType;
            PermitTypeInheritance = false;
        }

        /// <summary>
        /// constructor, sets all properties of this object based on the dictionary values
        /// </summary>
        /// <param name="metadataGeneratedByMapper">if set to <c>true</c> [metadata generated by mapper].</param>
        /// <remarks></remarks>
        public TypeMapperMetadata(bool metadataGeneratedByMapper)
            : base(null)
        {
            MetadataGeneratedByMapper = metadataGeneratedByMapper;
        }

        public Type SourceType { get; protected set; }
        public Type DestinationType { get; protected set; }
        public bool PermitTypeInheritance { get; protected set; }

        /// <summary>
        /// Gets or sets a value indicating whether metadata is generated at runtime by the mapper.
        /// </summary>
        /// <value><c>true</c> if [metadata generated by mapper]; otherwise, <c>false</c>.</value>
        /// <remarks></remarks>
        public bool MetadataGeneratedByMapper { get; protected set; }

       
    }
}